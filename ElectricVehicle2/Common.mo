within ElectricVehicle2;
package Common "Partial Models Shared in Main Package"

  model S2V
    Modelica.Blocks.Interfaces.RealInput u
      annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
    Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={50,12})));
    Favorites.Blocks.Math.Gain gain(k=5)
      annotation (Placement(transformation(extent={{2,-10},{22,10}})));
    Modelica.Electrical.Analog.Interfaces.Pin pin
      annotation (Placement(transformation(extent={{70,-10},{90,10}})));
    Favorites.Electrical.Analog.Basic.Ground ground
      annotation (Placement(transformation(extent={{18,-24},{38,-4}})));
    Modelica.Blocks.Math.Gain Normalizer(k=1/normalize)
      annotation (Placement(transformation(extent={{-26,-10},{-6,10}})));
    parameter Real normalize=1 "Gain value multiplied with input signal";
    Modelica.Blocks.Nonlinear.Limiter limiter(uMax=normalize)
      annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
  equation
    connect(signalVoltage.p, pin)
      annotation (Line(points={{60,12},{80,12},{80,0}}, color={0,0,255}));
    connect(signalVoltage.n, ground.p)
      annotation (Line(points={{40,12},{28,12},{28,-4}}, color={0,0,255}));
    connect(gain.y, signalVoltage.v) annotation (Line(points={{23,0},{36,0},{
            36,-10},{50,-10},{50,0}}, color={0,0,127}));
    connect(gain.u, Normalizer.y)
      annotation (Line(points={{0,0},{-5,0}}, color={0,0,127}));
    connect(Normalizer.u, limiter.y)
      annotation (Line(points={{-28,0},{-33,0}}, color={0,0,127}));
    connect(u, limiter.u)
      annotation (Line(points={{-100,0},{-56,0}}, color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-60,
              -20},{60,20}}), graphics={
          Line(points={{-10,12}}, color={28,108,200}),
          Ellipse(extent={{18,18},{-18,-18}}, lineColor={28,108,200}),
          Line(points={{-6,6},{0,-10},{6,6}}, color={28,108,200})}), Diagram(
          coordinateSystem(preserveAspectRatio=false, extent={{-60,-20},{60,
              20}})));
  end S2V;

  model V2S
    Favorites.Blocks.Math.Gain gain(k=denormalize)
      annotation (Placement(transformation(extent={{4,-6},{24,14}})));
    Modelica.Electrical.Analog.Interfaces.Pin pin
      annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
    Favorites.Electrical.Analog.Basic.Ground ground
      annotation (Placement(transformation(extent={{34,-24},{54,-4}})));
    Modelica.Blocks.Interfaces.RealOutput y
      annotation (Placement(transformation(extent={{80,-10},{100,10}})));
    Modelica.Electrical.Analog.Sensors.VoltageSensor voltageSensor
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-34,6})));
    parameter Real denormalize=1/5 "Gain value multiplied with input signal";
  equation
    connect(voltageSensor.p, pin) annotation (Line(points={{-44,6},{-52,6},{
            -52,0},{-80,0}}, color={0,0,255}));
    connect(voltageSensor.v, gain.u) annotation (Line(points={{-34,-5},{-34,
            -12},{-26,-12},{-26,4},{2,4}},
                                         color={0,0,127}));
    connect(voltageSensor.n, ground.p) annotation (Line(points={{-24,6},{-14,
            6},{-14,-18},{32,-18},{32,0},{44,0},{44,-4}}, color={0,0,255}));
    connect(gain.y, y) annotation (Line(points={{25,4},{54,4},{54,0},{90,0}},
          color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-60,
              -20},{60,20}}), graphics={Line(points={{-40,-10},{0,-10},{0,10},
                {40,10}}, color={28,108,200})}), Diagram(coordinateSystem(
            preserveAspectRatio=false, extent={{-60,-20},{60,20}})));
  end V2S;

  model B2V
    Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={50,12})));
    Modelica.Electrical.Analog.Interfaces.Pin pin
      annotation (Placement(transformation(extent={{70,-10},{90,10}})));
    Favorites.Electrical.Analog.Basic.Ground ground
      annotation (Placement(transformation(extent={{18,-24},{38,-4}})));
    parameter Real normalize=1 "Gain value multiplied with input signal";
    Modelica.Blocks.Interfaces.BooleanInput u
      annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
    Modelica.Blocks.Logical.Switch switch1
      annotation (Placement(transformation(extent={{-8,-10},{12,10}})));
    Modelica.Blocks.Sources.Constant const(k=5)
      annotation (Placement(transformation(extent={{-46,6},{-36,16}})));
    Modelica.Blocks.Sources.Constant const1(k=0)
      annotation (Placement(transformation(extent={{-46,-16},{-36,-6}})));
  equation
    connect(signalVoltage.p, pin)
      annotation (Line(points={{60,12},{80,12},{80,0}}, color={0,0,255}));
    connect(signalVoltage.n, ground.p)
      annotation (Line(points={{40,12},{28,12},{28,-4}}, color={0,0,255}));
    connect(u, switch1.u2)
      annotation (Line(points={{-100,0},{-10,0}}, color={255,0,255}));
    connect(switch1.y, signalVoltage.v) annotation (Line(points={{13,0},{38,0},
            {38,-8},{50,-8},{50,0}}, color={0,0,127}));
    connect(switch1.u1, const.y) annotation (Line(points={{-10,8},{-22,8},{
            -22,11},{-35.5,11}}, color={0,0,127}));
    connect(const1.y, switch1.u3) annotation (Line(points={{-35.5,-11},{
            -21.75,-11},{-21.75,-8},{-10,-8}}, color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-60,
              -20},{60,20}}), graphics={
          Line(points={{-10,12}}, color={28,108,200}),
          Ellipse(extent={{18,18},{-18,-18}}, lineColor={255,0,255}),
          Line(points={{-6,6},{0,-10},{6,6}}, color={255,0,255})}),  Diagram(
          coordinateSystem(preserveAspectRatio=false, extent={{-60,-20},{60,
              20}})));
  end B2V;

  model V2B
    Modelica.Electrical.Analog.Interfaces.Pin pin
      annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
    Favorites.Electrical.Analog.Basic.Ground ground
      annotation (Placement(transformation(extent={{-34,-24},{-14,-4}})));
    Modelica.Electrical.Analog.Sensors.VoltageSensor voltageSensor
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-40,8})));
    parameter Real denormalize=1/5 "Gain value multiplied with input signal";
    Modelica.Blocks.Interfaces.BooleanOutput y
      annotation (Placement(transformation(extent={{80,-10},{100,10}})));
    Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=3.3)
      annotation (Placement(transformation(extent={{0,-10},{20,10}})));
  equation
    connect(voltageSensor.p, pin) annotation (Line(points={{-50,8},{-52,8},{
            -52,0},{-80,0}}, color={0,0,255}));
    connect(voltageSensor.n, ground.p) annotation (Line(points={{-30,8},{-30,
            -2},{-24,-2},{-24,-4}}, color={0,0,255}));
    connect(voltageSensor.v, greaterThreshold.u) annotation (Line(points={{
            -40,-3},{-40,-8},{-34,-8},{-34,0},{-2,0}}, color={0,0,127}));
    connect(greaterThreshold.y, y)
      annotation (Line(points={{21,0},{90,0}}, color={255,0,255}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-60,
              -20},{60,20}}), graphics={Line(points={{-40,-10},{0,-10},{0,10},
                {40,10}}, color={255,0,255})}),  Diagram(coordinateSystem(
            preserveAspectRatio=false, extent={{-60,-20},{60,20}})));
  end V2B;

  model customPI
    Modelica.Blocks.Math.Feedback  feedback
      annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
    Modelica.Blocks.Math.Gain
                     P(k=kp)
                            "Proportional part of PID controller"
      annotation (Placement(transformation(extent={{-20,6},{0,26}})));
    Modelica.Blocks.Interfaces.RealInput setPoint
      annotation (Placement(transformation(extent={{-160,-20},{-120,20}})));
    Modelica.Blocks.Interfaces.RealInput feedbackSignal annotation (Placement(
          transformation(
          extent={{-20,-20},{20,20}},
          rotation=90,
          origin={0,-140})));
    Modelica.Blocks.Interfaces.RealOutput Out
      annotation (Placement(transformation(extent={{120,-10},{140,10}})));
    parameter Real kp=1 "Gain value multiplied with input signal";
    parameter Real ki=0 "Integrator gain";
    Modelica.Blocks.Continuous.Integrator integrator(k=ki)
      annotation (Placement(transformation(extent={{-20,-26},{0,-6}})));
    Modelica.Blocks.Math.Add add
      annotation (Placement(transformation(extent={{48,-10},{68,10}})));
  equation
    connect(feedback.u2, feedbackSignal) annotation (Line(points={{-60,-8},{
            -60,-88},{0,-88},{0,-140}}, color={0,0,127}));
    connect(feedback.y, P.u) annotation (Line(points={{-51,0},{-38,0},{-38,16},{-22,
            16}},             color={0,0,127}));
    connect(setPoint, feedback.u1) annotation (Line(points={{-140,0},{-106,0},
            {-106,0},{-68,0}}, color={0,0,127}));
    connect(P.y, add.u1) annotation (Line(points={{1,16},{16,16},{16,6},{46,6}},
                   color={0,0,127}));
    connect(integrator.u, P.u) annotation (Line(points={{-22,-16},{-38,-16},{-38,16},
            {-22,16}},       color={0,0,127}));
    connect(add.y, Out)
      annotation (Line(points={{69,0},{130,0}}, color={0,0,127}));
    connect(integrator.y, add.u2) annotation (Line(points={{1,-16},{22,-16},{
            22,-6},{46,-6}}, color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Text(
            extent={{-98,42},{102,-158}},
            lineColor={28,108,200},
            textString="PI
")}),                            Diagram(coordinateSystem(preserveAspectRatio=
             false)));
  end customPI;

  model notEqual
    Modelica.Blocks.Interfaces.RealInput u
      annotation (Placement(transformation(extent={{-160,-20},{-120,20}})));
    Modelica.Blocks.Interfaces.RealOutput y
      annotation (Placement(transformation(extent={{120,-10},{140,10}})));
    Modelica.Blocks.Math.Product product1
      annotation (Placement(transformation(extent={{-40,-16},{-20,4}})));
    Modelica.Blocks.Math.Add add
      annotation (Placement(transformation(extent={{52,-10},{72,10}})));
    Modelica.Blocks.Sources.Constant const(k=-1)
      annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
    Modelica.Blocks.Sources.Constant const1(k=1)
      annotation (Placement(transformation(extent={{0,12},{20,32}})));
  equation
    connect(u, product1.u1)
      annotation (Line(points={{-140,0},{-42,0}}, color={0,0,127}));
    connect(product1.y, add.u2)
      annotation (Line(points={{-19,-6},{50,-6}}, color={0,0,127}));
    connect(add.y, y)
      annotation (Line(points={{73,0},{130,0}}, color={0,0,127}));
    connect(const.y, product1.u2) annotation (Line(points={{-59,-30},{-52,-30},
            {-52,-12},{-42,-12}}, color={0,0,127}));
    connect(const1.y, add.u1) annotation (Line(points={{21,22},{40,22},{40,6},
            {50,6}}, color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Text(
            extent={{-100,100},{100,-100}},
            lineColor={0,0,0},
            lineThickness=0.5,
            textString="!=")}), Diagram(coordinateSystem(preserveAspectRatio=
              false)));
  end notEqual;

  model Equal
    Modelica.Blocks.Interfaces.RealInput u
      annotation (Placement(transformation(extent={{-160,-20},{-120,20}})));
    Modelica.Blocks.Interfaces.RealOutput y
      annotation (Placement(transformation(extent={{120,-10},{140,10}})));
  equation
    connect(u, y)
      annotation (Line(points={{-140,0},{130,0}}, color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Text(
            extent={{-100,100},{100,-100}},
            lineColor={0,0,0},
            lineThickness=0.5,
            textString="==")}), Diagram(coordinateSystem(preserveAspectRatio=
              false)));
  end Equal;
  annotation (Icon(graphics={Bitmap(
          extent={{-92,-90},{92,92}},
          imageSource=
              ""
               +
              "",
          fileName=
              "modelica://ElectricVehicle/../../../../../Downloads/creating-shared-value-1556501-1320033.png")}));
end Common;
